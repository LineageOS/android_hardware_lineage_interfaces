/*
 * Copyright (C) 2017 The LineageOS Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.lineage.livedisplay@1.0;

interface ILiveDisplay {
    @entry
    @callflow(next={"*"})
    init(uint32_t flags) generates (int32_t rc, int64_t hctx);

    @exit
    deinit(int64_t hctx, uint32_t flags) generates (int32_t rc);

    getGlobalColorBalanceRange(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, disp_range range);

    setGlobalColorBalance(int64_t hctx, uint32_t disp_id, int32_t warmness, uint32_t flags)
                generates (int32_t rc);

    getGlobalColorBalance(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, int32_t warmness, uint32_t flags);

    getNumDisplayModes(int64_t hctx, uint32_t disp_id, int32_t mode_type)
                generates (int32_t rc, int32_t mode_cnt, uint32_t flags);

    getDisplayModes(int64_t hctx, uint32_t disp_id, int32_t mode_type, int32_t mode_cnt)
                generates (int32_t rc, vec<disp_mode> modes, uint32_t flags);

    getActiveDisplayMode(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, int32_t mode_id, uint32_t mask, uint32_t flags);

    setActiveDisplayMode(int64_t hctx, uint32_t disp_id, int32_t mode_id, uint32_t flags)
                generates (int32_t flags);

    getDefaultDisplayMode(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, int32_t mode_id, uint32_t flags);

    setDefaultDisplayMode(int64_t hctx, uint32_t disp_id, int32_t mode_id, uint32_t flags)
                generates (int32_t rc);

    getGlobalPARange(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, disp_pa_range range);

    getGlobalPAConfig(int64_t hctx, uint32_t disp_id)
                generates (int32_t rc, uint32_t enable, disp_pa_config cfg);

    setGlobalPAConfig(int64_t hctx, uint32_t disp_id, uint32_t enable, disp_pa_config cfg)
                generates (int32_t rc);

    getFeatureVersion(int64_t hctx, uint32_t feature_id)
                generates (int32_t rc, version_info ver, uint32_t flags);
};
